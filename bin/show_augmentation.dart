import 'dart:io';

import 'package:args/args.dart';
import 'package:lsp_client/lsp_client.dart';

const _fileOption = 'file';
const _helpFlag = 'help';
const _usageError = 64;

Future<void> main(List<String> argv) async {
  final pwd = Directory.current.path;
  final args = _parseArgs(argv);

  final client = LspClient();
  await client.start();

  await client.initialize(
    InitializeParams(
      rootUri: 'file://$pwd',
      capabilities: const ClientCapabilities(
        experimental: {
          'supportsDartTextDocumentContentProvider': true,
        },
      ),
    ),
  );

  final initializedFuture = client.initialized();
  final analyzedFuture = client.awaitAnalyzed();
  await (initializedFuture, analyzedFuture).wait;

  final contentResult = await client.dartTextDocumentContent(
    DartTextDocumentContentParams(
      uri: 'dart-macro+file://$pwd/${args.path}',
    ),
  );

  stdout.write(contentResult.content);
  await client.dispose();
}

_Args _parseArgs(List<String> argv) {
  final parser = ArgParser();

  parser.addOption(
    _fileOption,
    help:
        'The file to show augmentation for, relative to the current directory.',
    mandatory: true,
    valueHelp: 'FILE',
  );

  parser.addFlag(
    _helpFlag,
    help: 'Show this help message.',
    negatable: false,
  );

  final result = parser.parse(argv);

  final args = _Args(
    help: result.flag(_helpFlag),
    path: result.option(_fileOption) ?? '',
  );

  _validateArgs(args, parser);
  return args;
}

void _validateArgs(_Args args, ArgParser parser) {
  if (args.help) {
    _printUsage(parser);
    exit(0);
  }

  if (args.path == '') {
    _printUsage(parser);
    exit(_usageError);
  }
}

void _printUsage(ArgParser parser) {
  // ignore: avoid_print
  print(
    'Shows augmentation generated by macros for a given file, if any.\n\n'
            'Usage: '
            'dart run show_augmentation --file=relative/path/to/file.dart\n' +
        parser.usage,
  );
}

class _Args {
  const _Args({
    required this.help,
    required this.path,
  });

  final bool help;
  final String path;
}
